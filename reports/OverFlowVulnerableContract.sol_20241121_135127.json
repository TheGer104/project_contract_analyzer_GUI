{
    "static_analysis": {
        "length_check": true,
        "has_fallback": false,
        "uses_require_or_assert": true,
        "public_without_require": true,
        "has_events": false,
        "pragma_version": true
    },
    "symbolic_analysis": {
        "complexity": true,
        "nested_blocks": false,
        "unused_variables": true,
        "unreachable_functions": false
    },
    "dynamic_analysis": {
        "loops": false,
        "direct_storage_access": false,
        "gas_intensive_functions": false
    },
    "vulnerabilities": {
        "reentrancy_vulnerable": false,
        "integer_overflow": true,
        "tx_origin": false,
        "variable_shadowing": false,
        "unsafe_arithmetic": false,
        "selfdestruct_detected": false
    },
    "mythril_analysis": {
        "mythril_analysis_raw": "/mnt/c/Users/thege/OneDrive/Documentos/projecte_analisi_contractes/myenv/lib/python3.12/site-packages/mythril/ethereum/evmcontract.py:94: SyntaxWarning: invalid escape sequence '\\s'\n  tokens = re.split(\"\\s+(and|or|not)\\s+\", expression, re.IGNORECASE)\n/mnt/c/Users/thege/OneDrive/Documentos/projecte_analisi_contractes/myenv/lib/python3.12/site-packages/mythril/laser/ethereum/state/machine_state.py:96: SyntaxWarning: invalid escape sequence '\\m'\n  \"\"\"\n/mnt/c/Users/thege/OneDrive/Documentos/projecte_analisi_contractes/myenv/lib/python3.12/site-packages/rlp/codec.py:245: SyntaxWarning: invalid escape sequence '\\*'\n  \"\"\"Decode an RLP encoded object.\n/mnt/c/Users/thege/OneDrive/Documentos/projecte_analisi_contractes/myenv/lib/python3.12/site-packages/rlp/lazy.py:9: SyntaxWarning: invalid escape sequence '\\*'\n  \"\"\"Decode an RLP encoded object in a lazy fashion.\n/mnt/c/Users/thege/OneDrive/Documentos/projecte_analisi_contractes/myenv/lib/python3.12/site-packages/rlp/lazy.py:66: SyntaxWarning: invalid escape sequence '\\*'\n  \"\"\"A RLP encoded list which decodes itself when necessary.\n/mnt/c/Users/thege/OneDrive/Documentos/projecte_analisi_contractes/myenv/lib/python3.12/site-packages/mythril/analysis/traceexplore.py: invalid escape sequence '\\d'\n\n==== Unprotected Ether Withdrawal ====\nSWC ID: 105\nSeverity: High\nContract: OverFlowVulnerableContract\nFunction name: withdraw(uint256)\nPC address: 762\nEstimated Gas Usage: 7888 - 62549\nAny sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\n--------------------\nIn file: /mnt/c/Users/thege/OneDrive/Documentos/projecte_analisi_contractes/tests/contracts/OverFlowVulnerableContract.sol:20\n\nmsg.sender.transfer(amount)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x40000000000048318, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: unsafeIncrement(uint256), txdata: 0x8de03d52010000000000000300000002010800000000000035080c80002800240b000409, decoded_data: (452312848583266407204629369279120102953422068156305232599423228372706133001,), value: 0x0\nCaller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000010880000001203210, decoded_data: (19059233623050826256,), value: 0x0\n\n==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: OverFlowVulnerableContract\nFunction name: unsafeIncrement(uint256)\nPC address: 895\nEstimated Gas Usage: 6205 - 26490\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: /mnt/c/Users/thege/OneDrive/Documentos/projecte_analisi_contractes/tests/contracts/OverFlowVulnerableContract.sol:25\n\nbalances[msg.sender] += amount\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: unsafeIncrement(uint256), txdata: 0x8de03d528000000000000000000000000000084000100000081040000840010800000020, decoded_data: (57896044618658097711785492504343954645311434346594548936741753362350866432032,), value: 0x0\nCaller: [CREATOR], function: unsafeIncrement(uint256), txdata: 0x8de03d528000000000000000000000000000000000000000000000000000000000000000, decoded_data: (57896044618658097711785492504343953926634992332820282019728792003956564819968,), value: 0x0\n\n==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: OverFlowVulnerableContract\nFunction name: deposit()\nPC address: 975\nEstimated Gas Usage: 6118 - 26403\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: /mnt/c/Users/thege/OneDrive/Documentos/projecte_analisi_contractes/tests/contracts/OverFlowVulnerableContract.sol:13\n\nbalances[msg.sender] += msg.value\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x2216000000, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: unsafeIncrement(uint256), txdata: 0x8de03d52ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, decoded_data: (115792089237316195423570985008687907853269984665640564039457584007913129639935,), value: 0x0\nCaller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x1\n\n\n"
    },
    "report_message": "Reporte generado en formato JSON para OverFlowVulnerableContract.sol. Archivo: reports/OverFlowVulnerableContract.sol_20241121_135127.json"
}